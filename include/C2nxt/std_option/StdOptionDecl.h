/// @file StdOptionDecl.h
/// @author Braxton Salyer <braxtonsalyer@gmail.com>
/// @brief This module provides the function declarations and type definitions for a template
/// instantiation of `StdOption(T)`
/// @version 0.2.1
/// @date 2022-03-05
///
/// MIT License
/// @copyright Copyright (c) 2022 Braxton Salyer <braxtonsalyer@gmail.com>
///
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in all
/// copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
/// SOFTWARE.

#if defined(T) && STD_TEMPLATE_DECL

	#define STD_TEMPLATE_SUPPRESS_INSTANTIATIONS TRUE

	#include <C2nxt/StdAllocators.h>
	#include <C2nxt/StdAssert.h>
	#include <C2nxt/StdBasicTypes.h>
	#include <C2nxt/monadic/StdIfLet.h>
	#include <C2nxt/std_option/StdOptionDef.h>
	#include <C2nxt/StdEnum.h>

typedef struct StdOptionIdentifier(T, vtable) StdOptionIdentifier(T, vtable);

EnumWithTag(StdOption(T),
			Option,
			(Some, T),
			(None),
			const StdOptionIdentifier(T, vtable) * m_vtable);

/// @brief Creates a `StdOption(T)` holding the given value
/// @param value - The value to store in the `StdOption`
/// @return a `StdOption` containing the given value
StdOption(T) StdOptionIdentifier(T, some)(T value);
/// @brief Creates a `StdOption(T)` holding no value
/// @return a `StdOption` containing no value
StdOption(T) StdOptionIdentifier(T, none)(void);
/// @brief Returns whether this `StdOption(T)` is holding a value
/// @param self - The `StdOption` to check
/// @return `true` if this `StdOption(T)` is holding a value, `false` otherwise
bool StdOptionIdentifier(T, is_some)(const StdOption(T) * restrict self);
/// @brief Returns whether this `StdOption(T)` __isn't__ holding a value
/// @param self - The `StdOption` to check
/// @return `true` if this `StdOption(T)` __isn't__ holding a value, `false` otherwise
bool StdOptionIdentifier(T, is_none)(const StdOption(T) * restrict self);
/// @brief Returns a pointer to the const value stored in this `StdOption`
/// @param self - The `StdOption` to get the stored value from
/// @return a pointer to the contained const value
/// @note Panics if `self` does not contain a value
const T* StdOptionIdentifier(T, as_const)(const StdOption(T) * restrict self);
/// @brief Returns a pointer to the value stored in this `StdOption`
/// @param self - The `StdOption` to get the stored value from
/// @return a pointer to the contained value
/// @note Panics if `self` does not contain a value
T* StdOptionIdentifier(T, as_mut)(StdOption(T) * restrict self);
/// @brief Returns the value stored in this `StdOption`
/// @param self - The `StdOption` to get the stored value from
/// @return the contained value
/// @note Panics if `self` does not contain a value
T StdOptionIdentifier(T, unwrap)(StdOption(T) * restrict self);
/// @brief Returns the value stored in this `StdOption` , or `default_value`
/// if this is `None`
/// @param self - The `StdOption` to get the stored value from
/// @param default_value - The value to return if this is `None`
/// @return the contained value, or `default_value`
T StdOptionIdentifier(T, unwrap_or)(StdOption(T) * restrict self, T default_value);
/// @brief Returns the value stored in this `StdOption` , or the value returned by
/// `default_generator` if this is `None`
/// @param self - The `StdOption` to get the stored value from
/// @param default_generator - The function to generate the value
///  to return if this is `None`
/// @return the contained value, or the one generated by `default_generator`
T StdOptionIdentifier(T, unwrap_or_else)(StdOption(T) * restrict self,
										 T (*default_generator)(void));
/// @brief Returns the value stored in this `StdOption`
/// @param self - The `StdOption` to get the stored value from
/// @return the contained value
/// @note Panics if `self` does not contain a value,
/// with the custom panic message `panic_message`
T StdOptionIdentifier(T, expect)(StdOption(T) * restrict self, restrict const_cstring panic_mesage);

/// @brief Returns `self` if it is `Some`, otherwise returns `option_b`
///
/// @param self - The `StdOption(T)` to "or" with `option_b`.
/// @param option_b - another `StdOption` to "or" with `self`.
///
/// @return `self` if is is `Some` Otherwise, `option_b`.
/// @ingroup std_option
StdOption(T) StdOptionIdentifier(T, or)(const StdOption(T) * restrict self, StdOption(T) option_b);

/// @brief Returns `self` if it is `Some`, otherwise returns the result of
/// calling `func`
///
/// @param self - The `StdOption(T)`.
/// @param func - The function to call if `self` is `None`.
///
/// @return `self` if is is `Some` Otherwise, `option_b`.
/// @ingroup std_option
StdOption(T) StdOptionIdentifier(T, or_else)(const StdOption(T) * restrict self,
											 StdOption(T) (*const func)(void));

/// @brief Converts this `StdOption` to a `bool`
/// Returns `true` if `self` is `Some`, `false` if it is `None`
/// @param self - The `StdOption` to get the stored value from
/// @return `self` converted to a `bool`
bool StdOptionIdentifier(T, as_bool)(const StdOption(T) * restrict self);

typedef struct StdOptionIdentifier(T, vtable) {
	bool (*const is_some)(const StdOption(T)* restrict self);
	bool (*const is_none)(const StdOption(T)* restrict self);
	const T* (*const as_const)(const StdOption(T)* restrict self);
	T* (*const as_mut)(StdOption(T)* restrict self);
	T (*const unwrap)(StdOption(T)* restrict self);
	T (*const unwrap_or)(StdOption(T)* restrict self, T default_value);
	T(*const unwrap_or_else)
	(StdOption(T)* restrict self, T(*default_generator)(void));
	T(*const expect)
	(StdOption(T)* restrict self, restrict const_cstring panic_message);
	StdOption(T) (*const _or)(const StdOption(T)* restrict self, StdOption(T) option_b);
	StdOption(T) (*const or_else)(const StdOption(T)* restrict self,
								  StdOption(T) (*const func)(void));
	bool (*const as_bool)(const StdOption(T)* restrict self);
}
StdOptionIdentifier(T, vtable);

/// @brief Implementation of `StdOption`'s vtable
static const StdOptionIdentifier(T, vtable) StdOptionIdentifier(T, vtable_impl)
	= {.is_some = StdOptionIdentifier(T, is_some),
	   .is_none = StdOptionIdentifier(T, is_none),
	   .as_const = StdOptionIdentifier(T, as_const),
	   .as_mut = StdOptionIdentifier(T, as_mut),
	   .unwrap = StdOptionIdentifier(T, unwrap),
	   .unwrap_or = StdOptionIdentifier(T, unwrap_or),
	   .unwrap_or_else = StdOptionIdentifier(T, unwrap_or_else),
	   .expect = StdOptionIdentifier(T, expect),
	   ._or = StdOptionIdentifier(T, or),
	   .or_else = StdOptionIdentifier(T, or_else),
	   .as_bool = StdOptionIdentifier(T, as_bool)};

	#undef STD_TEMPLATE_SUPPRESS_INSTANTIATIONS
#endif // defined(T) && STD_TEMPLATE_DECL
