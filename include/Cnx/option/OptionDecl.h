/// @file OptionDecl.h
/// @author Braxton Salyer <braxtonsalyer@gmail.com>
/// @brief This module provides the function declarations and type definitions for a template
/// instantiation of `CnxOption(T)`
/// @version 0.2.3
/// @date 2022-05-08
///
/// MIT License
/// @copyright Copyright (c) 2022 Braxton Salyer <braxtonsalyer@gmail.com>
///
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in all
/// copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
/// SOFTWARE.

#include <Cnx/option/OptionDef.h>

#if defined(OPTION_T) && OPTION_DECL

	#define CNX_TEMPLATE_SUPPRESS_INSTANTIATIONS TRUE

	#include <Cnx/Allocators.h>
	#include <Cnx/Assert.h>
	#include <Cnx/BasicTypes.h>
	#include <Cnx/monadic/IfLet.h>
	#include <Cnx/Enum.h>

typedef struct CnxOptionIdentifier(OPTION_T, vtable) CnxOptionIdentifier(OPTION_T, vtable);

EnumWithTag(CnxOption(OPTION_T),
			Option,
			(Some, OPTION_T),
			(None),
			const CnxOptionIdentifier(OPTION_T, vtable) * m_vtable);

	#define ___DISABLE_IF_NULL(self) \
		cnx_disable_if(!(self), "Can't perform an operator on a null option")

/// @brief Returns whether this `CnxOption(T)` is holding a value
/// @param self - The `CnxOption` to check
/// @return `true` if this `CnxOption(T)` is holding a value, `false` otherwise
__attr(nodiscard) __attr(not_null(1)) OPTION_STATIC OPTION_INLINE
	bool CnxOptionIdentifier(OPTION_T, is_some)(const CnxOption(OPTION_T) * restrict self)
		___DISABLE_IF_NULL(self);
/// @brief Returns whether this `CnxOption(T)` __isn't__ holding a value
/// @param self - The `CnxOption` to check
/// @return `true` if this `CnxOption(T)` __isn't__ holding a value, `false` otherwise
__attr(nodiscard) __attr(not_null(1)) OPTION_STATIC OPTION_INLINE
	bool CnxOptionIdentifier(OPTION_T, is_none)(const CnxOption(OPTION_T) * restrict self)
		___DISABLE_IF_NULL(self);
/// @brief Returns a pointer to the const value stored in this `CnxOption`
/// @param self - The `CnxOption` to get the stored value from
/// @return a pointer to the contained const value
/// @note Panics if `self` does not contain a value
__attr(nodiscard) __attr(not_null(1)) __attr(returns_not_null) OPTION_STATIC OPTION_INLINE const
	OPTION_T* CnxOptionIdentifier(OPTION_T, as_const)(const CnxOption(OPTION_T) * restrict self)
		___DISABLE_IF_NULL(self);
/// @brief Returns a pointer to the value stored in this `CnxOption`
/// @param self - The `CnxOption` to get the stored value from
/// @return a pointer to the contained value
/// @note Panics if `self` does not contain a value
__attr(nodiscard) __attr(not_null(1)) __attr(returns_not_null) OPTION_STATIC OPTION_INLINE
	OPTION_T* CnxOptionIdentifier(OPTION_T, as_mut)(CnxOption(OPTION_T) * restrict self)
		___DISABLE_IF_NULL(self);
/// @brief Returns the value stored in this `CnxOption`
/// @param self - The `CnxOption` to get the stored value from
/// @return the contained value
/// @note Panics if `self` does not contain a value
__attr(nodiscard) __attr(not_null(1)) OPTION_STATIC OPTION_INLINE OPTION_T
	CnxOptionIdentifier(OPTION_T, unwrap)(CnxOption(OPTION_T) * restrict self)
		___DISABLE_IF_NULL(self);
/// @brief Returns the value stored in this `CnxOption` , or `default_value`
/// if this is `None`
/// @param self - The `CnxOption` to get the stored value from
/// @param default_value - The value to return if this is `None`
/// @return the contained value, or `default_value`
__attr(nodiscard) __attr(not_null(1)) OPTION_STATIC OPTION_INLINE OPTION_T
	CnxOptionIdentifier(OPTION_T, unwrap_or)(CnxOption(OPTION_T) * restrict self,
											 OPTION_T default_value) ___DISABLE_IF_NULL(self);
/// @brief Returns the value stored in this `CnxOption` , or the value returned by
/// `default_generator` if this is `None`
/// @param self - The `CnxOption` to get the stored value from
/// @param default_generator - The function to generate the value
///  to return if this is `None`
/// @return the contained value, or the one generated by `default_generator`
__attr(nodiscard) __attr(not_null(1, 2)) OPTION_STATIC OPTION_INLINE OPTION_T
	CnxOptionIdentifier(OPTION_T, unwrap_or_else)(CnxOption(OPTION_T) * restrict self,
												  OPTION_T (*const default_generator)(void))
		___DISABLE_IF_NULL(self)
			cnx_disable_if(!default_generator, "default_generator cannot be null");
/// @brief Returns the value stored in this `CnxOption`
/// @param self - The `CnxOption` to get the stored value from
/// @return the contained value
/// @note Panics if `self` does not contain a value,
/// with the custom panic message `panic_message`
__attr(nodiscard) __attr(not_null(1, 2)) OPTION_STATIC OPTION_INLINE OPTION_T
	CnxOptionIdentifier(OPTION_T, expect)(CnxOption(OPTION_T) * restrict self,
										  restrict const_cstring panic_message)
		___DISABLE_IF_NULL(self) cnx_disable_if(!panic_message, "panic_message cannot be null");

/// @brief Returns `self` if it is `Some`, otherwise returns `option_b`
///
/// @param self - The `CnxOption(T)` to "or" with `option_b`.
/// @param option_b - another `CnxOption` to "or" with `self`.
///
/// @return `self` if is is `Some` Otherwise, `option_b`.
/// @ingroup cnx_option
__attr(nodiscard) __attr(not_null(1)) OPTION_STATIC OPTION_INLINE CnxOption(OPTION_T)
	CnxOptionIdentifier(OPTION_T, or)(const CnxOption(OPTION_T) * restrict self,
									  CnxOption(OPTION_T) option_b) ___DISABLE_IF_NULL(self);

/// @brief Returns `self` if it is `Some`, otherwise returns the result of
/// calling `func`
///
/// @param self - The `CnxOption(T)`.
/// @param func - The function to call if `self` is `None`.
///
/// @return `self` if is is `Some` Otherwise, `option_b`.
/// @ingroup cnx_option
__attr(nodiscard) __attr(not_null(1, 2)) OPTION_STATIC OPTION_INLINE CnxOption(OPTION_T)
	CnxOptionIdentifier(OPTION_T, or_else)(const CnxOption(OPTION_T) * restrict self,
										   CnxOption(OPTION_T) (*const func)(void))
		___DISABLE_IF_NULL(self)
			cnx_disable_if(!func, "The function to call if `self` is `None` can't be null");

/// @brief Converts this `CnxOption` to a `bool`
/// Returns `true` if `self` is `Some`, `false` if it is `None`
/// @param self - The `CnxOption` to get the stored value from
/// @return `self` converted to a `bool`
__attr(nodiscard) __attr(not_null(1)) OPTION_STATIC OPTION_INLINE
	bool CnxOptionIdentifier(OPTION_T, as_bool)(const CnxOption(OPTION_T) * restrict self)
		___DISABLE_IF_NULL(self);

typedef struct CnxOptionIdentifier(OPTION_T, vtable) {
	bool (*const is_some)(const CnxOption(OPTION_T)* restrict self);
	bool (*const is_none)(const CnxOption(OPTION_T)* restrict self);
	const OPTION_T* (*const as_const)(const CnxOption(OPTION_T)* restrict self);
	OPTION_T* (*const as_mut)(CnxOption(OPTION_T)* restrict self);
	OPTION_T (*const unwrap)(CnxOption(OPTION_T)* restrict self);
	OPTION_T (*const unwrap_or)(CnxOption(OPTION_T)* restrict self, OPTION_T default_value);
	OPTION_T(*const unwrap_or_else)
	(CnxOption(OPTION_T)* restrict self, OPTION_T(*default_generator)(void));
	OPTION_T(*const expect)
	(CnxOption(OPTION_T)* restrict self, restrict const_cstring panic_message);
	CnxOption(OPTION_T) (*const _or)(const CnxOption(OPTION_T)* restrict self,
									 CnxOption(OPTION_T) option_b);
	CnxOption(OPTION_T) (*const or_else)(const CnxOption(OPTION_T)* restrict self,
										 CnxOption(OPTION_T) (*const func)(void));
	bool (*const as_bool)(const CnxOption(OPTION_T)* restrict self);
}
CnxOptionIdentifier(OPTION_T, vtable);

/// @brief Implementation of `CnxOption`'s vtable
__attr(maybe_unused) static const CnxOptionIdentifier(OPTION_T, vtable)
	CnxOptionIdentifier(OPTION_T, vtable_impl)
	= {.is_some = CnxOptionIdentifier(OPTION_T, is_some),
	   .is_none = CnxOptionIdentifier(OPTION_T, is_none),
	   .as_const = CnxOptionIdentifier(OPTION_T, as_const),
	   .as_mut = CnxOptionIdentifier(OPTION_T, as_mut),
	   .unwrap = CnxOptionIdentifier(OPTION_T, unwrap),
	   .unwrap_or = CnxOptionIdentifier(OPTION_T, unwrap_or),
	   .unwrap_or_else = CnxOptionIdentifier(OPTION_T, unwrap_or_else),
	   .expect = CnxOptionIdentifier(OPTION_T, expect),
	   ._or = CnxOptionIdentifier(OPTION_T, or),
	   .or_else = CnxOptionIdentifier(OPTION_T, or_else),
	   .as_bool = CnxOptionIdentifier(OPTION_T, as_bool)};

	#undef ___DISABLE_IF_NULL
	#undef CNX_TEMPLATE_SUPPRESS_INSTANTIATIONS
#endif // defined(T) && OPTION_DECL
